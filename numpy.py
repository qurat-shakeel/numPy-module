# -*- coding: utf-8 -*-
"""numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CWuqvQwS73Xppkq0mTN5-k88MX_Mkji7
"""

import numpy as np
a = np.array([0, 1, 2])
print(a)
print(np.arange(10))

# Commented out IPython magic to ensure Python compatibility.
#python lists
L = range(1000)
# %timeit [i**2 for i in L]

# Commented out IPython magic to ensure Python compatibility.

import numpy as np
a = np.arange(1000)  # creating numpy array
# %timeit a**2    #numpy is memory efficiient as well as it provides fast operation

#1-D
a = np.array([0,1,2,3,4])


# print dimensions
a.ndim

#shape
a.shape


len(a)

#2-D, 3-D
b = np.array([[0,1,2],[3,4,5]])
b

b.ndim

b.shape

len(b)  #returns the size of first dimension

c=np.array([[[0,1],[2,3]],[[4,5],[6,7]]])
c

c.ndim



c.shape

#functions for creating arrays
a = np.arange(1,10,2 )#start, end(exclusive) , step
a

#common array
a=np.ones((3,3))    #function argumennts ; 3 rows and 3 columns
a

# identity matrix ; returns a 2D array with ones on the diagonal and zeros elsewhere
import numpy as np

np.eye(3)

np.eye(3,2) # 3 is no. of rows; 2 is no. of columns

# using linear space
a=np.linspace(0,1,6) # start, end, number of points
a

b = np.zeros((3,3))
b

# create array using diagonal function

a= np.diag([1,2,3,4])
a # construct a 2-D diagonal array

np.diag(a) # extract diagonal

# create array using random
a=np.random.rand(4)
a

a= np.random.randn(4) # standard normal variant
a

# basic datatypes
a= np.arange(10)
a.dtype

# we can explicitly specify which data type you want
a=np.arange(10, dtype="float64")
a

# default datatype if float for zeros and ones function
a=np.zeros((3,3))
print(a)
a.dtype

d= np.array([1+2j , 2+4j]) # complex datatype
print(d.dtype)

b=np.array([True,False,True,False])  # boolean datatype
print(b.dtype)

s=np.array(['Qurat','Aisha','Insha'])
s.dtype

a=np.arange(10)
print(a[5]) # indices begin at 0

# for multidimentional arrays, indexes are tuples of integers
a = np.diag([1,2,3])
print(a[2,2])

a[2,1] =5  #assigning value
a

# slicing
a=np.arange(10)
a

a[1:8:2]  # startindex, endindex(exclusive) , step

# combining sklicing and asssignment;
a=np.arange(10)
a[5:]=10
a

b=np.arange(5)
a[5:]=b[::-1]
a

#copies and views
a=np.arange(10)
a
b=a[::2]
b

np.shares_memory(a,b) # two variables sharing the same memory

b[0] = 10
b

a=np.arange(10)
c=a[::2].copy()   # force a copy
c

a =np.random.randint(0,20,15)
a

# using boolean mask
mask=(a%2==0)
extract_from_a = a[mask]
extract_from_a

a[mask]=-1
a

# indexing with array of integer
a=np.arange(0,100,10)
a

a[[2,3,2,4,2]]

# new values can be assigned
a[[9,7]]= -200
a

